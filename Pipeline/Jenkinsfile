pipeline {
    agent {
        label "devops2402"
    }

    tools {
        jdk "jdk17"
        maven "maven3"
        nodejs "nodejs23"
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage("Git Checkout") {
            steps {
                git branch: "master",
                credentialsId: "git-credentials",
                url: "https://github.com/VuPlayBoizz/Mork-Project.git"
            }
        }

        stage("Compile Code") {
            parallel {
                stage("Compile Database Code") {
                    steps {
                        dir("Code/database-service") {
                            sh "mvn compile"
                        }
                    }
                }

                stage("Compile Backend Code") {
                    steps {
                        dir("Code/backend-service") {
                            sh "mvn compile"
                        }
                    }
                }

                stage("Compile API Code") {
                    steps {
                        dir("Code/api-gateway") {
                            sh "mvn compile"
                        }
                    }
                }

                stage("Compile Frontend Code") {
                    steps {
                        dir("Code/ui-service") {
                            sh "npm run build"
                        }
                    }
                }
            }
        }

        stage("Unit Test") {
            parallel {
                stage("Unit Test Database") {
                    steps {
                        dir("Code/database-service") {
                            sh "mvn test"
                        }
                    }
                }

                stage("Unit Test Backend") {
                    steps {
                        dir("Code/backend-service") {
                            sh "mvn test"
                        }
                    }
                }

                stage("Unit Test API") {
                    steps {
                        dir("Code/api-gateway") {
                            sh "mvn test"
                        }
                    }
                }

                stage("Unit Test Frontend") {
                    steps {
                        dir("Code/ui-service") {
                            sh "npm test"
                        }
                    }
                }
            }
        }

        stage("File System Scan") {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html Code"
            }            
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Mock-Project \
                        -Dsonar.projectKey=Mock-Project \
                        -Dsonar.java.binaries=.                  
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false,
                        credentialsId: 'sonar-credentials'
                }
            }
        }

        stage("Prepare Image Tag") {
            steps {
                script {
                    env.IMAGE_TAGS = readFile('commit-id').trim()
                    echo "Image tag set to: ${IMAGE_TAGS}"
                }
            }
        }

        stage("Docker Build Images") {
            parallel {
                stage("Build Database Image") {
                    steps {
                        dir("Code/database-service") {
                            sh "docker build -t nguyenbavu1902/database-service:${IMAGE_TAGS} ."
                        }
                    }
                }

                stage("Build Backend Image") {
                    steps {
                        dir("Code/backend-service") {
                            sh "docker build -t nguyenbavu1902/backend-service:${IMAGE_TAGS}."
                        }
                    }
                }

                stage("Build API Image") {
                    steps {
                        dir("Code/api-gateway") {
                            sh "docker build -t nguyenbavu1902/api-gateway:${IMAGE_TAGS} ."
                        }
                    }
                }

                stage("Build Frontend Image") {
                    steps {
                        dir("Code/ui-service") {
                            sh "docker build -t nguyenbavu1902/ui-service:${IMAGE_TAGS} ."
                        }
                    }
                }
            }
        }
    }   
}